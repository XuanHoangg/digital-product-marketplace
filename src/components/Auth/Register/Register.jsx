import React, { useState, useEffect } from "react";
import "./Register.scss";
import { NavLink, useNavigate } from "react-router-dom";
import { toast } from "react-toastify";

import validation from "../../../utils/validation";
import {
  postRegister,
  getOTP,
  verifyOTP,
} from "./../../../service/auth/authAPI";
import OTPPopup from "../OTPPopup/OTPPopup";

const Register = () => {
  // navigate
  const navigate = useNavigate();
  // state
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [userType, setUserType] = useState("buyer");
  const [agreeTerms, setAgreeTerms] = useState(false);

  // popup OTP
  const [isOTPPopupOpen, setIsOTPPopupOpen] = useState(false);

  // validation
  const { validateEmail, validateUsername, validatePassword } = validation;

  const handleSubmit = async (e) => {
    let isBuyer = true;
    let isEnabled2FA = true;
    e.preventDefault();
    if (userType === "seller") {
      isBuyer = false;
    }

    if (!validateEmail(email)) {
      toast.error("Email kh√¥ng h·ª£p l·ªá!");
      return;
    }
    if (!validatePassword(password)) {
      toast.error("M·∫≠t kh·∫©u ph·∫£i h∆°n 5 k√Ω t·ª±!");
      return;
    }

    if (password !== confirmPassword) {
      toast.error("M·∫≠t kh·∫©u kh√¥ng kh·ªõp!");
      return;
    }
    let data = await postRegister(
      email,
      password,
      confirmPassword,
      isBuyer,
      isEnabled2FA
    );
    if (data.status === 3) {
      toast.error(data.messageResult);
      return;
    }
    setIsOTPPopupOpen(true);
  };

  // H√†m x·ª≠ l√Ω x√°c nh·∫≠n OTP
  const handleVerifyOTP = async (email, otpCode) => {
    try {
      let data = await verifyOTP(email, otpCode);
      await new Promise((resolve) => setTimeout(resolve, 1500));
      if (data.status === 0) {
        toast.success("X√°c nh·∫≠n OTP th√†nh c√¥ng!");
        setIsOTPPopupOpen(false);
        setTimeout(() => {
          navigate("/login");
        }, 1000);
        return;
      }
      if (data.status === 3) {
        toast.error(data.messageResult);
        return;
      }
    } catch (error) {
      toast.error("M√£ OTP kh√¥ng ƒë√∫ng!");
    }
  };

  // H√†m x·ª≠ l√Ω g·ª≠i l·∫°i OTP
  const handleResendOTP = async () => {
    try {
      await getOTP(email);
      await new Promise((resolve) => setTimeout(resolve, 1000));
      toast.success("ƒê√£ g·ª≠i l·∫°i m√£ OTP!");
    } catch (error) {
      toast.error("Kh√¥ng th·ªÉ g·ª≠i l·∫°i m√£ OTP!");
    }
  };

  return (
    <div className="register-container">
      <div className="register-card">
        <div className="register-header">
          <div className="register-logo">D</div>
          <h1 className="register-title">DigitalMarket</h1>
          <h2 className="register-subtitle">ƒêƒÉng k√Ω</h2>
          <p className="register-desc">
            Tham gia c√πng ch√∫ng t√¥i ƒë·ªÉ mua ho·∫∑c b√°n s·∫£n ph·∫©m s·ªë
          </p>
        </div>

        <form className="register-form" onSubmit={handleSubmit}>
          <div className="register-field">
            <label className="register-label">Email</label>
            <input
              type="email"
              className="register-input"
              placeholder="Nh·∫≠p email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
            />
          </div>

          <div className="register-field">
            <label className="register-label">M·∫≠t kh·∫©u</label>
            <div className="register-password">
              <input
                type={showPassword ? "text" : "password"}
                className="register-input"
                placeholder="T·∫°o m·∫≠t kh·∫©u"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
              />
              <button
                type="button"
                className="register-toggle"
                onClick={() => setShowPassword(!showPassword)}
              >
                {showPassword ? "·∫®n" : "Hi·ªán"}
              </button>
            </div>
          </div>

          <div className="register-field">
            <label className="register-label">Nh·∫≠p l·∫°i m·∫≠t kh·∫©u</label>
            <div className="register-password">
              <input
                type={showConfirmPassword ? "text" : "password"}
                className="register-input"
                placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u"
                value={confirmPassword}
                onChange={(e) => setConfirmPassword(e.target.value)}
                required
              />
              <button
                type="button"
                className="register-toggle"
                onClick={() => setShowConfirmPassword(!showConfirmPassword)}
              >
                {showConfirmPassword ? "·∫®n" : "Hi·ªán"}
              </button>
            </div>
          </div>

          <div className="register-field">
            <label className="register-label">B·∫°n mu·ªën tr·ªü th√†nh:</label>
            <div className="register-user-type">
              <div
                className={`register-type-card ${
                  userType === "buyer" ? "active" : ""
                }`}
                onClick={() => setUserType("buyer")}
              >
                <div className="register-type-icon">üõí</div>
                <span className="user-type">Ng∆∞·ªùi mua</span>
              </div>
              <div
                className={`register-type-card ${
                  userType === "seller" ? "active" : ""
                }`}
                onClick={() => setUserType("seller")}
              >
                <div className="register-type-icon">üë§</div>
                <span className="user-type">Ng∆∞·ªùi b√°n</span>
              </div>
            </div>
          </div>

          <div className="register-checkbox">
            <label className="register-check-item">
              <input
                type="checkbox"
                checked={agreeTerms}
                onChange={(e) => setAgreeTerms(e.target.checked)}
                required
              />
              <span>
                T√¥i ƒë·ªìng √Ω{" "}
                <a href="#" className="register-link">
                  ƒêi·ªÅu kho·∫£n s·ª≠ d·ª•ng
                </a>{" "}
                v√†{" "}
                <a href="#" className="register-link">
                  Ch√≠nh s√°ch b·∫£o m·∫≠t
                </a>
              </span>
            </label>
          </div>

          <button type="submit" className="register-btn register-btn-primary">
            T·∫°o t√†i kho·∫£n
          </button>

          <p className="register-login">
            B·∫°n ƒë√£ c√≥ t√†i kho·∫£n?{" "}
            <NavLink
              to="/login"
              className="nav-link"
              style={{ color: "black" }}
            >
              ƒêƒÉng nh·∫≠p ngay
            </NavLink>
          </p>
        </form>
      </div>
      <OTPPopup
        isOpen={isOTPPopupOpen}
        onClose={() => setIsOTPPopupOpen(false)}
        email={email}
        onVerify={handleVerifyOTP}
        onResend={handleResendOTP}
      />
    </div>
  );
};

export default Register;
